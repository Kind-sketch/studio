{
  "entities": {
    "Artisan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Artisan",
      "type": "object",
      "description": "Represents an artisan who creates and sells crafts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the artisan entity."
        },
        "mobileNumber": {
          "type": "string",
          "description": "Artisan's mobile phone number, used for authentication."
        },
        "aadharNumber": {
          "type": "string",
          "description": "Artisan's Aadhar number."
        },
        "profileDetails": {
          "type": "string",
          "description": "Artisan's profile details."
        },
        "craftIds": {
          "type": "array",
          "description": "References to Crafts. (Relationship: Artisan 1:N Craft)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "mobileNumber",
        "aadharNumber",
        "profileDetails"
      ]
    },
    "Buyer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Buyer",
      "type": "object",
      "description": "Represents a buyer who purchases crafts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the buyer entity."
        },
        "name": {
          "type": "string",
          "description": "Buyer's name."
        },
        "craftIds": {
          "type": "array",
          "description": "References to Crafts. (Relationship: Buyer 1:N Craft)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Sponsor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sponsor",
      "type": "object",
      "description": "Represents a sponsor who supports artisans.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sponsor entity."
        },
        "name": {
          "type": "string",
          "description": "Sponsor's name."
        },
        "artisanIds": {
          "type": "array",
          "description": "References to Artisans. (Relationship: Sponsor 1:N Artisan)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Craft": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Craft",
      "type": "object",
      "description": "Represents a craft created by an artisan.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the craft entity."
        },
        "artisanId": {
          "type": "string",
          "description": "Reference to Artisan. (Relationship: Artisan 1:N Craft)"
        },
        "name": {
          "type": "string",
          "description": "Name of the craft."
        },
        "description": {
          "type": "string",
          "description": "Description of the craft, possibly AI-generated."
        },
        "category": {
          "type": "string",
          "description": "Category of the craft."
        },
        "price": {
          "type": "number",
          "description": "Price of the craft."
        },
        "buyerIds": {
          "type": "array",
          "description": "References to Buyers. (Relationship: Buyer N:N Craft)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "artisanId",
        "name",
        "description",
        "category",
        "price"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/artisans/{artisanId}",
        "definition": {
          "entityName": "Artisan",
          "schema": {
            "$ref": "#/backend/entities/Artisan"
          },
          "description": "Stores artisan profiles. Path-based ownership enforces that only the artisan can read/write their profile.",
          "params": [
            {
              "name": "artisanId",
              "description": "The unique identifier of the artisan."
            }
          ]
        }
      },
      {
        "path": "/buyers/{buyerId}",
        "definition": {
          "entityName": "Buyer",
          "schema": {
            "$ref": "#/backend/entities/Buyer"
          },
          "description": "Stores buyer profiles. Path-based ownership enforces that only the buyer can read/write their profile.",
          "params": [
            {
              "name": "buyerId",
              "description": "The unique identifier of the buyer."
            }
          ]
        }
      },
      {
        "path": "/sponsors/{sponsorId}",
        "definition": {
          "entityName": "Sponsor",
          "schema": {
            "$ref": "#/backend/entities/Sponsor"
          },
          "description": "Stores sponsor profiles. Path-based ownership enforces that only the sponsor can read/write their profile.",
          "params": [
            {
              "name": "sponsorId",
              "description": "The unique identifier of the sponsor."
            }
          ]
        }
      },
      {
        "path": "/crafts/{craftId}",
        "definition": {
          "entityName": "Craft",
          "schema": {
            "$ref": "#/backend/entities/Craft"
          },
          "description": "Stores craft details. Includes denormalized 'artisanId' for authorization independence.",
          "params": [
            {
              "name": "craftId",
              "description": "The unique identifier of the craft."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to support the Artistry Havens application, focusing on artisans, buyers, and sponsors. It prioritizes authorization independence and clear security rules. User authentication will be handled by Firebase Authentication using phone number and OTP verification, as requested. Data segregation is applied to differentiate between artisans, buyers, and sponsors, each with their profiles and related data.\n\n*   **Authorization Independence:** Artisan-owned crafts denormalize the `artisanId` to enforce ownership-based access control without complex `get()` calls in security rules. Craft documents include the `artisanId`, enabling secure list operations scoped to the artisan. Buyer documents will include `craftIds` so we can directly find out who bought which crafts.\n\n*   **Structural Segregation:** Artisans, Buyers, and Sponsors have separate collections. Crafts are stored in a top-level collection to facilitate searching across artisans, but include the `artisanId` to link back to the owning artisan.\n\n*   **Access Modeling:** Private data (artisan profiles) uses path-based ownership (`/artisans/{artisanId}`). Crafts uses a top-level collection, but with the `artisanId` denormalized to maintain ownership invariants.\n\n*   **QAPs Support:** The structure supports QAPs by segregating data and using path-based ownership where applicable. List operations are secured by rules that can efficiently filter based on denormalized fields such as `artisanId` and `buyerIds` on the Craft documents.\n\n*   **Multilingual Support:** The design can accommodate multilingual support by adding fields to the Artisan, Buyer, Sponsor, and Craft documents for storing translations. The UI will handle the presentation of the appropriate language based on user preference.\n\n*   **AI Features:** The Artisan collection and the Craft collection are designed to easily be populated with AI-generated content. In addition, statistics will be handled via cloud functions that will compute the likes and bought quantities per month/week/year and store them in a summary table per artisan."
  }
}